#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace FatedQuestLibraries
{
    /// <summary>
    /// The type names storable within a Universal Object Data Object.
    /// </summary>
    enum class UniversalStorableType : uint8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = 0,

        String,

        Int,

        Vector4I,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EUniversalStorableType
    {
    public:
        static UniversalStorableType Min() { return UniversalStorableType::String; }
        static UniversalStorableType Max() { return UniversalStorableType::Vector4I; }

        static UniversalStorableType* ToArray()
        {
            static UniversalStorableType returnArray[] =
            {
                UniversalStorableType::String,
                UniversalStorableType::Int,
                UniversalStorableType::Vector4I,
            };
            
            return returnArray;
        }

        static std::vector<UniversalStorableType> ToVector()
        {
            static std::vector<UniversalStorableType> returnVector =
            {
                UniversalStorableType::String,
                UniversalStorableType::Int,
                UniversalStorableType::Vector4I,
            };
            
            return returnVector;
        }

        static std::vector<std::string> ToVectorValues()
        {
            static std::vector<std::string> returnVector =
            {
                "String",
                "Int",
                "Vector4I",
            };
            
            return returnVector;
        }

        static std::string ToString(UniversalStorableType value)
        {
            switch (value)
            {
                case UniversalStorableType::Unknown: return "Unknown";
                case UniversalStorableType::String: return "String";
                case UniversalStorableType::Int: return "Int";
                case UniversalStorableType::Vector4I: return "Vector4I";
            }
            
            return "Unknown";
        }

        static UniversalStorableType FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return UniversalStorableType::Unknown;
                if (value == "String") return UniversalStorableType::String;
                if (value == "Int") return UniversalStorableType::Int;
                if (value == "Vector4I") return UniversalStorableType::Vector4I;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return UniversalStorableType::Unknown;
                if (valueLower == "string") return UniversalStorableType::String;
                if (valueLower == "int") return UniversalStorableType::Int;
                if (valueLower == "vector4i") return UniversalStorableType::Vector4I;
            }
            
            return UniversalStorableType::Unknown;
        }
    
 private:

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
