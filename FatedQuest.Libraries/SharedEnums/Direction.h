#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace FatedQuestLibraries
{
    /// <summary>
    /// Describes the basic direction one might face.
    /// </summary>
    enum class Direction : uint8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = 0,

        North,

        East,

        South,

        West,

        NorthEast,

        SouthEast,

        SouthWest,

        NorthWest,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EDirection
    {
    public:
        static Direction Min() { return Direction::North; }
        static Direction Max() { return Direction::NorthWest; }

        static Direction* ToArray()
        {
            static Direction returnArray[] =
            {
                Direction::North,
                Direction::East,
                Direction::South,
                Direction::West,
                Direction::NorthEast,
                Direction::SouthEast,
                Direction::SouthWest,
                Direction::NorthWest,
            };
            
            return returnArray;
        }

        static std::vector<Direction> ToVector()
        {
            static std::vector<Direction> returnVector =
            {
                Direction::North,
                Direction::East,
                Direction::South,
                Direction::West,
                Direction::NorthEast,
                Direction::SouthEast,
                Direction::SouthWest,
                Direction::NorthWest,
            };
            
            return returnVector;
        }

        static std::vector<std::string> ToVectorValues()
        {
            static std::vector<std::string> returnVector =
            {
                "North",
                "East",
                "South",
                "West",
                "NorthEast",
                "SouthEast",
                "SouthWest",
                "NorthWest",
            };
            
            return returnVector;
        }

        static std::string ToString(Direction value)
        {
            switch (value)
            {
                case Direction::Unknown: return "Unknown";
                case Direction::North: return "North";
                case Direction::East: return "East";
                case Direction::South: return "South";
                case Direction::West: return "West";
                case Direction::NorthEast: return "NorthEast";
                case Direction::SouthEast: return "SouthEast";
                case Direction::SouthWest: return "SouthWest";
                case Direction::NorthWest: return "NorthWest";
            }
            
            return "Unknown";
        }

        static Direction FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return Direction::Unknown;
                if (value == "North") return Direction::North;
                if (value == "East") return Direction::East;
                if (value == "South") return Direction::South;
                if (value == "West") return Direction::West;
                if (value == "NorthEast") return Direction::NorthEast;
                if (value == "SouthEast") return Direction::SouthEast;
                if (value == "SouthWest") return Direction::SouthWest;
                if (value == "NorthWest") return Direction::NorthWest;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return Direction::Unknown;
                if (valueLower == "north") return Direction::North;
                if (valueLower == "east") return Direction::East;
                if (valueLower == "south") return Direction::South;
                if (valueLower == "west") return Direction::West;
                if (valueLower == "northeast") return Direction::NorthEast;
                if (valueLower == "southeast") return Direction::SouthEast;
                if (valueLower == "southwest") return Direction::SouthWest;
                if (valueLower == "northwest") return Direction::NorthWest;
            }
            
            return Direction::Unknown;
        }
    
 private:

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
