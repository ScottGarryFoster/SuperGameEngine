#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace FatedQuestLibraries
{
    /// <summary>
    /// When altering a value, describes if the new value respects the input case or not.
    /// </summary>
    enum class CaseRespective : uint8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown,

        /// <summary>
        /// When modifying do not adjust or alter the case of alphabetical characters.
        /// </summary>
        RetainExistingCase,

        /// <summary>
        /// When modifying the method is free to modify the case if it makes sense to.
        /// </summary>
        AlterCaseAsNeeded,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class ECaseRespective
    {
    public:
        static CaseRespective Min() { return CaseRespective::RetainExistingCase; }
        static CaseRespective Max() { return CaseRespective::AlterCaseAsNeeded; }

        static CaseRespective* ToArray()
        {
            static CaseRespective returnArray[] =
            {
                CaseRespective::RetainExistingCase,
                CaseRespective::AlterCaseAsNeeded,
            };
            
            return returnArray;
        }

        static std::vector<CaseRespective> ToVector()
        {
            static std::vector<CaseRespective> returnVector =
            {
                CaseRespective::RetainExistingCase,
                CaseRespective::AlterCaseAsNeeded,
            };
            
            return returnVector;
        }

        static std::string ToString(CaseRespective value)
        {
            switch (value)
            {
                case CaseRespective::Unknown: return "Unknown";
                case CaseRespective::RetainExistingCase: return "RetainExistingCase";
                case CaseRespective::AlterCaseAsNeeded: return "AlterCaseAsNeeded";
            }
            
            return "Unknown";
        }

        static CaseRespective FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return CaseRespective::Unknown;
                if (value == "RetainExistingCase") return CaseRespective::RetainExistingCase;
                if (value == "AlterCaseAsNeeded") return CaseRespective::AlterCaseAsNeeded;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return CaseRespective::Unknown;
                if (valueLower == "retainexistingcase") return CaseRespective::RetainExistingCase;
                if (valueLower == "altercaseasneeded") return CaseRespective::AlterCaseAsNeeded;
            }
            
            return CaseRespective::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
