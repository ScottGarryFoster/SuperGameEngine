#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace FatedQuestLibraries
{
    /// <summary>
    /// Describes how to evaluate string input in terms of case.
    /// </summary>
    enum class CaseSensitivity : int8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// Upper and lower case matters, the text must match.
        /// </summary>
        CaseSensitive,

        /// <summary>
        /// Case does not matter. UPPER = lower.
        /// </summary>
        IgnoreCase,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class ECaseSensitivity
    {
    public:
        static CaseSensitivity Min() { return CaseSensitivity::CaseSensitive; }
        static CaseSensitivity Max() { return CaseSensitivity::IgnoreCase; }

        static CaseSensitivity* ToArray()
        {
            static CaseSensitivity returnArray[] =
            {
                CaseSensitivity::CaseSensitive,
                CaseSensitivity::IgnoreCase,
            };
            
            return returnArray;
        }

        static std::vector<CaseSensitivity> ToVector()
        {
            static std::vector<CaseSensitivity> returnVector =
            {
                CaseSensitivity::CaseSensitive,
                CaseSensitivity::IgnoreCase,
            };
            
            return returnVector;
        }

        static std::vector<std::string> ToVectorValues()
        {
            static std::vector<std::string> returnVector =
            {
                "CaseSensitive",
                "IgnoreCase",
            };
            
            return returnVector;
        }

        static std::string ToString(CaseSensitivity value)
        {
            switch (value)
            {
                case CaseSensitivity::Unknown: return "Unknown";
                case CaseSensitivity::CaseSensitive: return "CaseSensitive";
                case CaseSensitivity::IgnoreCase: return "IgnoreCase";
            }
            
            return "Unknown";
        }

        static CaseSensitivity FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return CaseSensitivity::Unknown;
                if (value == "CaseSensitive") return CaseSensitivity::CaseSensitive;
                if (value == "IgnoreCase") return CaseSensitivity::IgnoreCase;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return CaseSensitivity::Unknown;
                if (valueLower == "casesensitive") return CaseSensitivity::CaseSensitive;
                if (valueLower == "ignorecase") return CaseSensitivity::IgnoreCase;
            }
            
            return CaseSensitivity::Unknown;
        }
    
 private:

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
