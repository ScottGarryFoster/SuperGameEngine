#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace FatedQuestLibraries
{
    /// <summary>
    /// The form of the file packaged. This should help to inform you
    /// of which method to use when gathering the data back out of a package
    /// file.
    /// </summary>
    enum class PackageFileStorageType : int8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// Raw unbinary file form. The files will not be changed.
        /// </summary>
        Untouched,

        /// <summary>
        /// The files will be converted to raw binary.
        /// </summary>
        Binary,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EPackageFileStorageType
    {
    public:
        static PackageFileStorageType Min() { return PackageFileStorageType::Untouched; }
        static PackageFileStorageType Max() { return PackageFileStorageType::Binary; }

        static PackageFileStorageType* ToArray()
        {
            static PackageFileStorageType returnArray[] =
            {
                PackageFileStorageType::Untouched,
                PackageFileStorageType::Binary,
            };
            
            return returnArray;
        }

        static std::vector<PackageFileStorageType> ToVector()
        {
            static std::vector<PackageFileStorageType> returnVector =
            {
                PackageFileStorageType::Untouched,
                PackageFileStorageType::Binary,
            };
            
            return returnVector;
        }

        static std::vector<std::string> ToVectorValues()
        {
            static std::vector<std::string> returnVector =
            {
                "Untouched",
                "Binary",
            };
            
            return returnVector;
        }

        static std::string ToString(PackageFileStorageType value)
        {
            switch (value)
            {
                case PackageFileStorageType::Unknown: return "Unknown";
                case PackageFileStorageType::Untouched: return "Untouched";
                case PackageFileStorageType::Binary: return "Binary";
            }
            
            return "Unknown";
        }

        static PackageFileStorageType FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return PackageFileStorageType::Unknown;
                if (value == "Untouched") return PackageFileStorageType::Untouched;
                if (value == "Binary") return PackageFileStorageType::Binary;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return PackageFileStorageType::Unknown;
                if (valueLower == "untouched") return PackageFileStorageType::Untouched;
                if (valueLower == "binary") return PackageFileStorageType::Binary;
            }
            
            return PackageFileStorageType::Unknown;
        }
    
 private:

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
