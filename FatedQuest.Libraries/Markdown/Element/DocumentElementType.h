#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace FatedQuestLibraries
{
    /// <summary>
    /// Describes the type of a single aspect of a document, the element.
    /// </summary>
    enum class DocumentElementType : uint8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = 0,

        /// <summary>
        /// A paragraph of text.
        /// </summary>
        Paragraph,

        /// <summary>
        /// Top Level Heading
        /// </summary>
        Heading1,

        Heading2,

        Heading3,

        Heading4,

        Heading5,

        Heading6,

        /// <summary>
        /// Tile is hovered or should be rendered as such.
        /// If this is not paired with an action assume only hover has occured.
        /// </summary>
        Table,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EDocumentElementType
    {
    public:
        static DocumentElementType Min() { return DocumentElementType::Paragraph; }
        static DocumentElementType Max() { return DocumentElementType::Table; }

        static DocumentElementType* ToArray()
        {
            static DocumentElementType returnArray[] =
            {
                DocumentElementType::Paragraph,
                DocumentElementType::Heading1,
                DocumentElementType::Heading2,
                DocumentElementType::Heading3,
                DocumentElementType::Heading4,
                DocumentElementType::Heading5,
                DocumentElementType::Heading6,
                DocumentElementType::Table,
            };
            
            return returnArray;
        }

        static std::vector<DocumentElementType> ToVector()
        {
            static std::vector<DocumentElementType> returnVector =
            {
                DocumentElementType::Paragraph,
                DocumentElementType::Heading1,
                DocumentElementType::Heading2,
                DocumentElementType::Heading3,
                DocumentElementType::Heading4,
                DocumentElementType::Heading5,
                DocumentElementType::Heading6,
                DocumentElementType::Table,
            };
            
            return returnVector;
        }

        static std::vector<std::string> ToVectorValues()
        {
            static std::vector<std::string> returnVector =
            {
                "Paragraph",
                "Heading1",
                "Heading2",
                "Heading3",
                "Heading4",
                "Heading5",
                "Heading6",
                "Table",
            };
            
            return returnVector;
        }

        static std::string ToString(DocumentElementType value)
        {
            switch (value)
            {
                case DocumentElementType::Unknown: return "Unknown";
                case DocumentElementType::Paragraph: return "Paragraph";
                case DocumentElementType::Heading1: return "Heading1";
                case DocumentElementType::Heading2: return "Heading2";
                case DocumentElementType::Heading3: return "Heading3";
                case DocumentElementType::Heading4: return "Heading4";
                case DocumentElementType::Heading5: return "Heading5";
                case DocumentElementType::Heading6: return "Heading6";
                case DocumentElementType::Table: return "Table";
            }
            
            return "Unknown";
        }

        static DocumentElementType FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return DocumentElementType::Unknown;
                if (value == "Paragraph") return DocumentElementType::Paragraph;
                if (value == "Heading1") return DocumentElementType::Heading1;
                if (value == "Heading2") return DocumentElementType::Heading2;
                if (value == "Heading3") return DocumentElementType::Heading3;
                if (value == "Heading4") return DocumentElementType::Heading4;
                if (value == "Heading5") return DocumentElementType::Heading5;
                if (value == "Heading6") return DocumentElementType::Heading6;
                if (value == "Table") return DocumentElementType::Table;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return DocumentElementType::Unknown;
                if (valueLower == "paragraph") return DocumentElementType::Paragraph;
                if (valueLower == "heading1") return DocumentElementType::Heading1;
                if (valueLower == "heading2") return DocumentElementType::Heading2;
                if (valueLower == "heading3") return DocumentElementType::Heading3;
                if (valueLower == "heading4") return DocumentElementType::Heading4;
                if (valueLower == "heading5") return DocumentElementType::Heading5;
                if (valueLower == "heading6") return DocumentElementType::Heading6;
                if (valueLower == "table") return DocumentElementType::Table;
            }
            
            return DocumentElementType::Unknown;
        }
    
 private:

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
