#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameInput
{
    /// <summary>
    /// The position of the event upon a hat (dpad generally).
    /// </summary>
    enum class HatPosition : uint8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = 0,

        LEFTUP,

        UP,

        RIGHTUP,

        LEFT,

        CENTERED,

        RIGHT,

        LEFTDOWN,

        DOWN,

        RIGHTDOWN,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EHatPosition
    {
    public:
        static HatPosition Min() { return HatPosition::LEFTUP; }
        static HatPosition Max() { return HatPosition::RIGHTDOWN; }

        static HatPosition* ToArray()
        {
            static HatPosition returnArray[] =
            {
                HatPosition::LEFTUP,
                HatPosition::UP,
                HatPosition::RIGHTUP,
                HatPosition::LEFT,
                HatPosition::CENTERED,
                HatPosition::RIGHT,
                HatPosition::LEFTDOWN,
                HatPosition::DOWN,
                HatPosition::RIGHTDOWN,
            };
            
            return returnArray;
        }

        static std::vector<HatPosition> ToVector()
        {
            static std::vector<HatPosition> returnVector =
            {
                HatPosition::LEFTUP,
                HatPosition::UP,
                HatPosition::RIGHTUP,
                HatPosition::LEFT,
                HatPosition::CENTERED,
                HatPosition::RIGHT,
                HatPosition::LEFTDOWN,
                HatPosition::DOWN,
                HatPosition::RIGHTDOWN,
            };
            
            return returnVector;
        }

        static std::string ToString(HatPosition value)
        {
            switch (value)
            {
                case HatPosition::Unknown: return "Unknown";
                case HatPosition::LEFTUP: return "LEFTUP";
                case HatPosition::UP: return "UP";
                case HatPosition::RIGHTUP: return "RIGHTUP";
                case HatPosition::LEFT: return "LEFT";
                case HatPosition::CENTERED: return "CENTERED";
                case HatPosition::RIGHT: return "RIGHT";
                case HatPosition::LEFTDOWN: return "LEFTDOWN";
                case HatPosition::DOWN: return "DOWN";
                case HatPosition::RIGHTDOWN: return "RIGHTDOWN";
            }
            
            return "Unknown";
        }

        static HatPosition FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return HatPosition::Unknown;
                if (value == "LEFTUP") return HatPosition::LEFTUP;
                if (value == "UP") return HatPosition::UP;
                if (value == "RIGHTUP") return HatPosition::RIGHTUP;
                if (value == "LEFT") return HatPosition::LEFT;
                if (value == "CENTERED") return HatPosition::CENTERED;
                if (value == "RIGHT") return HatPosition::RIGHT;
                if (value == "LEFTDOWN") return HatPosition::LEFTDOWN;
                if (value == "DOWN") return HatPosition::DOWN;
                if (value == "RIGHTDOWN") return HatPosition::RIGHTDOWN;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return HatPosition::Unknown;
                if (valueLower == "leftup") return HatPosition::LEFTUP;
                if (valueLower == "up") return HatPosition::UP;
                if (valueLower == "rightup") return HatPosition::RIGHTUP;
                if (valueLower == "left") return HatPosition::LEFT;
                if (valueLower == "centered") return HatPosition::CENTERED;
                if (valueLower == "right") return HatPosition::RIGHT;
                if (valueLower == "leftdown") return HatPosition::LEFTDOWN;
                if (valueLower == "down") return HatPosition::DOWN;
                if (valueLower == "rightdown") return HatPosition::RIGHTDOWN;
            }
            
            return HatPosition::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
