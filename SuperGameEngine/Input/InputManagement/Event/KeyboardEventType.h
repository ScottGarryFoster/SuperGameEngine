#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameInput
{
    /// <summary>
    /// The type of the keyboard event.
    /// </summary>
    enum class KeyboardEventType : int8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// Key pressed
        /// </summary>
        SDL_KEYDOWN,

        /// <summary>
        /// Key released
        /// </summary>
        SDL_KEYUP,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EKeyboardEventType
    {
    public:
        static KeyboardEventType Min() { return KeyboardEventType::SDL_KEYDOWN; }
        static KeyboardEventType Max() { return KeyboardEventType::SDL_KEYUP; }

        static KeyboardEventType* ToArray()
        {
            static KeyboardEventType returnArray[] =
            {
                KeyboardEventType::SDL_KEYDOWN,
                KeyboardEventType::SDL_KEYUP,
            };
            
            return returnArray;
        }

        static std::vector<KeyboardEventType> ToVector()
        {
            static std::vector<KeyboardEventType> returnVector =
            {
                KeyboardEventType::SDL_KEYDOWN,
                KeyboardEventType::SDL_KEYUP,
            };
            
            return returnVector;
        }

        static std::vector<std::string> ToVectorValues()
        {
            static std::vector<std::string> returnVector =
            {
                "SDL_KEYDOWN",
                "SDL_KEYUP",
            };
            
            return returnVector;
        }

        static std::string ToString(KeyboardEventType value)
        {
            switch (value)
            {
                case KeyboardEventType::Unknown: return "Unknown";
                case KeyboardEventType::SDL_KEYDOWN: return "SDL_KEYDOWN";
                case KeyboardEventType::SDL_KEYUP: return "SDL_KEYUP";
            }
            
            return "Unknown";
        }

        static KeyboardEventType FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return KeyboardEventType::Unknown;
                if (value == "SDL_KEYDOWN") return KeyboardEventType::SDL_KEYDOWN;
                if (value == "SDL_KEYUP") return KeyboardEventType::SDL_KEYUP;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return KeyboardEventType::Unknown;
                if (valueLower == "sdl_keydown") return KeyboardEventType::SDL_KEYDOWN;
                if (valueLower == "sdl_keyup") return KeyboardEventType::SDL_KEYUP;
            }
            
            return KeyboardEventType::Unknown;
        }
    
 private:

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
