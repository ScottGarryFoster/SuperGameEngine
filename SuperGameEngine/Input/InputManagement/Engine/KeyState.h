#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameInput
{
    /// <summary>
    /// Describes the possible keys pressed on a keyboard.
    /// </summary>
    enum class KeyState : int8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// Key is not pressed at all.
        /// Default state.
        /// </summary>
        Unpressed = 0,

        /// <summary>
        /// Has just been pressed. Always also means down. Fires first frame.
        /// </summary>
        Pressed = 1 << 0,

        /// <summary>
        /// Key is down. Fires every frame.
        /// </summary>
        Down = 1 << 1,

        /// <summary>
        /// Key was just release. Fires first frame.
        /// </summary>
        Up = 1 << 2,
    };

    inline KeyState operator | (KeyState lhs, KeyState rhs)
    {
        using T = std::underlying_type_t <KeyState>;
        return static_cast<KeyState>(static_cast<T>(lhs) | static_cast<T>(rhs));
    }

    inline KeyState& operator |= (KeyState& lhs, KeyState rhs)
    {
        lhs = lhs | rhs;
        return lhs;
    }

    inline KeyState operator & (KeyState lhs, KeyState rhs)
    {
        using T = std::underlying_type_t <KeyState>;
        return static_cast<KeyState>(static_cast<T>(lhs) & static_cast<T>(rhs));
    }

    inline KeyState& operator &= (KeyState& lhs, KeyState rhs)
    {
        lhs = lhs | rhs;
        return lhs;
    }

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EKeyState
    {
    public:
        static KeyState Min() { return KeyState::Unpressed; }
        static KeyState Max() { return KeyState::Up; }

        static KeyState* ToArray()
        {
            static KeyState returnArray[] =
            {
                KeyState::Unpressed,
                KeyState::Pressed,
                KeyState::Down,
                KeyState::Up,
            };
            
            return returnArray;
        }

        static std::vector<KeyState> ToVector()
        {
            static std::vector<KeyState> returnVector =
            {
                KeyState::Unpressed,
                KeyState::Pressed,
                KeyState::Down,
                KeyState::Up,
            };
            
            return returnVector;
        }

        static std::string ToString(KeyState value)
        {
            switch (value)
            {
                case KeyState::Unknown: return "Unknown";
                case KeyState::Unpressed: return "Unpressed";
                case KeyState::Pressed: return "Pressed";
                case KeyState::Down: return "Down";
                case KeyState::Up: return "Up";
            }
            
            return "Unknown";
        }

        static KeyState FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return KeyState::Unknown;
                if (value == "Unpressed") return KeyState::Unpressed;
                if (value == "Pressed") return KeyState::Pressed;
                if (value == "Down") return KeyState::Down;
                if (value == "Up") return KeyState::Up;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return KeyState::Unknown;
                if (valueLower == "unpressed") return KeyState::Unpressed;
                if (valueLower == "pressed") return KeyState::Pressed;
                if (valueLower == "down") return KeyState::Down;
                if (valueLower == "up") return KeyState::Up;
            }
            
            return KeyState::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }

        /// <summary>
        /// Test to see whether value has the given flag.
        /// </summary>
        /// <param name="origin">Origin to look for flag in. </param>
        /// <param name="lookFor">Value to look for. </param>
        /// <returns>True means has flag. </returns>
        static bool HasFlag(KeyState origin, KeyState lookFor)
        {
            return (origin & lookFor) != KeyState::Unpressed;
        }
    };
}
