#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameInput
{
    /// <summary>
    /// Describes a control stick upon a modern game controller.
    /// </summary>
    enum class UniversalControllerAxis : int8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        LeftStickX,

        LeftStickY,

        RightStickX,

        RightStickY,

        LeftTrigger,

        RightTrigger,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EUniversalControllerAxis
    {
    public:
        static UniversalControllerAxis Min() { return UniversalControllerAxis::LeftStickX; }
        static UniversalControllerAxis Max() { return UniversalControllerAxis::RightTrigger; }

        static UniversalControllerAxis* ToArray()
        {
            static UniversalControllerAxis returnArray[] =
            {
                UniversalControllerAxis::LeftStickX,
                UniversalControllerAxis::LeftStickY,
                UniversalControllerAxis::RightStickX,
                UniversalControllerAxis::RightStickY,
                UniversalControllerAxis::LeftTrigger,
                UniversalControllerAxis::RightTrigger,
            };
            
            return returnArray;
        }

        static std::vector<UniversalControllerAxis> ToVector()
        {
            static std::vector<UniversalControllerAxis> returnVector =
            {
                UniversalControllerAxis::LeftStickX,
                UniversalControllerAxis::LeftStickY,
                UniversalControllerAxis::RightStickX,
                UniversalControllerAxis::RightStickY,
                UniversalControllerAxis::LeftTrigger,
                UniversalControllerAxis::RightTrigger,
            };
            
            return returnVector;
        }

        static std::vector<std::string> ToVectorValues()
        {
            static std::vector<std::string> returnVector =
            {
                "LeftStickX",
                "LeftStickY",
                "RightStickX",
                "RightStickY",
                "LeftTrigger",
                "RightTrigger",
            };
            
            return returnVector;
        }

        static std::string ToString(UniversalControllerAxis value)
        {
            switch (value)
            {
                case UniversalControllerAxis::Unknown: return "Unknown";
                case UniversalControllerAxis::LeftStickX: return "LeftStickX";
                case UniversalControllerAxis::LeftStickY: return "LeftStickY";
                case UniversalControllerAxis::RightStickX: return "RightStickX";
                case UniversalControllerAxis::RightStickY: return "RightStickY";
                case UniversalControllerAxis::LeftTrigger: return "LeftTrigger";
                case UniversalControllerAxis::RightTrigger: return "RightTrigger";
            }
            
            return "Unknown";
        }

        static UniversalControllerAxis FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return UniversalControllerAxis::Unknown;
                if (value == "LeftStickX") return UniversalControllerAxis::LeftStickX;
                if (value == "LeftStickY") return UniversalControllerAxis::LeftStickY;
                if (value == "RightStickX") return UniversalControllerAxis::RightStickX;
                if (value == "RightStickY") return UniversalControllerAxis::RightStickY;
                if (value == "LeftTrigger") return UniversalControllerAxis::LeftTrigger;
                if (value == "RightTrigger") return UniversalControllerAxis::RightTrigger;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return UniversalControllerAxis::Unknown;
                if (valueLower == "leftstickx") return UniversalControllerAxis::LeftStickX;
                if (valueLower == "leftsticky") return UniversalControllerAxis::LeftStickY;
                if (valueLower == "rightstickx") return UniversalControllerAxis::RightStickX;
                if (valueLower == "rightsticky") return UniversalControllerAxis::RightStickY;
                if (valueLower == "lefttrigger") return UniversalControllerAxis::LeftTrigger;
                if (valueLower == "righttrigger") return UniversalControllerAxis::RightTrigger;
            }
            
            return UniversalControllerAxis::Unknown;
        }
    
 private:

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
