#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameInput
{
    /// <summary>
    /// Describes a button on any controller from the Modern era.
    /// </summary>
    enum class UniversalControllerButton : int8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        FaceButtonDown,

        FaceButtonLeft,

        FaceButtonRight,

        FaceButtonUp,

        DPadDown,

        DPadLeft,

        DPadRight,

        DPadUp,

        LeftShoulder,

        RightShoulder,

        LeftTrigger,

        RightTrigger,

        Start,

        Select,

        LeftStickClick,

        RightStickClick,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EUniversalControllerButton
    {
    public:
        static UniversalControllerButton Min() { return UniversalControllerButton::FaceButtonDown; }
        static UniversalControllerButton Max() { return UniversalControllerButton::RightStickClick; }

        static UniversalControllerButton* ToArray()
        {
            static UniversalControllerButton returnArray[] =
            {
                UniversalControllerButton::FaceButtonDown,
                UniversalControllerButton::FaceButtonLeft,
                UniversalControllerButton::FaceButtonRight,
                UniversalControllerButton::FaceButtonUp,
                UniversalControllerButton::DPadDown,
                UniversalControllerButton::DPadLeft,
                UniversalControllerButton::DPadRight,
                UniversalControllerButton::DPadUp,
                UniversalControllerButton::LeftShoulder,
                UniversalControllerButton::RightShoulder,
                UniversalControllerButton::LeftTrigger,
                UniversalControllerButton::RightTrigger,
                UniversalControllerButton::Start,
                UniversalControllerButton::Select,
                UniversalControllerButton::LeftStickClick,
                UniversalControllerButton::RightStickClick,
            };
            
            return returnArray;
        }

        static std::vector<UniversalControllerButton> ToVector()
        {
            static std::vector<UniversalControllerButton> returnVector =
            {
                UniversalControllerButton::FaceButtonDown,
                UniversalControllerButton::FaceButtonLeft,
                UniversalControllerButton::FaceButtonRight,
                UniversalControllerButton::FaceButtonUp,
                UniversalControllerButton::DPadDown,
                UniversalControllerButton::DPadLeft,
                UniversalControllerButton::DPadRight,
                UniversalControllerButton::DPadUp,
                UniversalControllerButton::LeftShoulder,
                UniversalControllerButton::RightShoulder,
                UniversalControllerButton::LeftTrigger,
                UniversalControllerButton::RightTrigger,
                UniversalControllerButton::Start,
                UniversalControllerButton::Select,
                UniversalControllerButton::LeftStickClick,
                UniversalControllerButton::RightStickClick,
            };
            
            return returnVector;
        }

        static std::vector<UniversalControllerButton> GroupDPad()
        {
            static std::vector<UniversalControllerButton> returnVector =
            {
                UniversalControllerButton::DPadDown,
                UniversalControllerButton::DPadLeft,
                UniversalControllerButton::DPadRight,
                UniversalControllerButton::DPadUp,
            };
            
            return returnVector;
        }

        static std::string ToString(UniversalControllerButton value)
        {
            switch (value)
            {
                case UniversalControllerButton::Unknown: return "Unknown";
                case UniversalControllerButton::FaceButtonDown: return "FaceButtonDown";
                case UniversalControllerButton::FaceButtonLeft: return "FaceButtonLeft";
                case UniversalControllerButton::FaceButtonRight: return "FaceButtonRight";
                case UniversalControllerButton::FaceButtonUp: return "FaceButtonUp";
                case UniversalControllerButton::DPadDown: return "DPadDown";
                case UniversalControllerButton::DPadLeft: return "DPadLeft";
                case UniversalControllerButton::DPadRight: return "DPadRight";
                case UniversalControllerButton::DPadUp: return "DPadUp";
                case UniversalControllerButton::LeftShoulder: return "LeftShoulder";
                case UniversalControllerButton::RightShoulder: return "RightShoulder";
                case UniversalControllerButton::LeftTrigger: return "LeftTrigger";
                case UniversalControllerButton::RightTrigger: return "RightTrigger";
                case UniversalControllerButton::Start: return "Start";
                case UniversalControllerButton::Select: return "Select";
                case UniversalControllerButton::LeftStickClick: return "LeftStickClick";
                case UniversalControllerButton::RightStickClick: return "RightStickClick";
            }
            
            return "Unknown";
        }

        static UniversalControllerButton FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return UniversalControllerButton::Unknown;
                if (value == "FaceButtonDown") return UniversalControllerButton::FaceButtonDown;
                if (value == "FaceButtonLeft") return UniversalControllerButton::FaceButtonLeft;
                if (value == "FaceButtonRight") return UniversalControllerButton::FaceButtonRight;
                if (value == "FaceButtonUp") return UniversalControllerButton::FaceButtonUp;
                if (value == "DPadDown") return UniversalControllerButton::DPadDown;
                if (value == "DPadLeft") return UniversalControllerButton::DPadLeft;
                if (value == "DPadRight") return UniversalControllerButton::DPadRight;
                if (value == "DPadUp") return UniversalControllerButton::DPadUp;
                if (value == "LeftShoulder") return UniversalControllerButton::LeftShoulder;
                if (value == "RightShoulder") return UniversalControllerButton::RightShoulder;
                if (value == "LeftTrigger") return UniversalControllerButton::LeftTrigger;
                if (value == "RightTrigger") return UniversalControllerButton::RightTrigger;
                if (value == "Start") return UniversalControllerButton::Start;
                if (value == "Select") return UniversalControllerButton::Select;
                if (value == "LeftStickClick") return UniversalControllerButton::LeftStickClick;
                if (value == "RightStickClick") return UniversalControllerButton::RightStickClick;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return UniversalControllerButton::Unknown;
                if (valueLower == "facebuttondown") return UniversalControllerButton::FaceButtonDown;
                if (valueLower == "facebuttonleft") return UniversalControllerButton::FaceButtonLeft;
                if (valueLower == "facebuttonright") return UniversalControllerButton::FaceButtonRight;
                if (valueLower == "facebuttonup") return UniversalControllerButton::FaceButtonUp;
                if (valueLower == "dpaddown") return UniversalControllerButton::DPadDown;
                if (valueLower == "dpadleft") return UniversalControllerButton::DPadLeft;
                if (valueLower == "dpadright") return UniversalControllerButton::DPadRight;
                if (valueLower == "dpadup") return UniversalControllerButton::DPadUp;
                if (valueLower == "leftshoulder") return UniversalControllerButton::LeftShoulder;
                if (valueLower == "rightshoulder") return UniversalControllerButton::RightShoulder;
                if (valueLower == "lefttrigger") return UniversalControllerButton::LeftTrigger;
                if (valueLower == "righttrigger") return UniversalControllerButton::RightTrigger;
                if (valueLower == "start") return UniversalControllerButton::Start;
                if (valueLower == "select") return UniversalControllerButton::Select;
                if (valueLower == "leftstickclick") return UniversalControllerButton::LeftStickClick;
                if (valueLower == "rightstickclick") return UniversalControllerButton::RightStickClick;
            }
            
            return UniversalControllerButton::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
