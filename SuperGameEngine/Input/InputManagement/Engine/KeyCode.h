#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameInput
{
    /// <summary>
    /// Describes a key upon a keyboard.
    /// </summary>
    enum class KeyCode : int16_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        None,

        Backspace,

        Tab,

        Clear,

        Return,

        Pause,

        Escape,

        Space,

        Exclaim,

        Quotedbl,

        Hash,

        Dollar,

        Ampersand,

        Quote,

        LeftParenthesis,

        RightParenthesis,

        Asterisk,

        Plus,

        Comma,

        Minus,

        Period,

        Slash,

        Zero,

        One,

        Two,

        Three,

        Four,

        Five,

        Six,

        Seven,

        Eight,

        Nine,

        Colon,

        Semicolon,

        Less,

        Equals,

        Greater,

        Question,

        At,

        LeftBracket,

        Backslash,

        RightBracket,

        Caret,

        Underscore,

        Backquote,

        A,

        B,

        C,

        D,

        E,

        F,

        G,

        H,

        I,

        J,

        K,

        L,

        M,

        N,

        O,

        P,

        Q,

        R,

        S,

        T,

        U,

        V,

        W,

        X,

        Y,

        Z,

        Delete,

        KeyPadZero,

        KeyPadOne,

        KeyPadTwo,

        KeyPadThree,

        KeyPadFour,

        KeyPadFive,

        KeyPadSix,

        KeyPadSeven,

        KeyPadEight,

        KeyPadNine,

        KeyPadPeriod,

        KeyPadDivide,

        KeyPadMultiply,

        KeyPadMinus,

        KeyPadPlus,

        KeyPadEnter,

        KeyPadEquals,

        Up,

        Down,

        Right,

        Left,

        Insert,

        Home,

        End,

        PageUp,

        PageDown,

        F1,

        F2,

        F3,

        F4,

        F5,

        F6,

        F7,

        F8,

        F9,

        F10,

        F11,

        F12,

        F13,

        F14,

        F15,

        Numlock,

        Capslock,

        Scrollock,

        RightShift,

        LeftShift,

        RightCtrl,

        LeftCtrl,

        RightAlt,

        LeftAlt,

        LeftSuper,

        RightSuper,

        Mode,

        Help,

        Print,

        Sysreq,

        Menu,

        Power,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EKeyCode
    {
    public:
        static KeyCode Min() { return KeyCode::None; }
        static KeyCode Max() { return KeyCode::Power; }

        static KeyCode* ToArray()
        {
            static KeyCode returnArray[] =
            {
                KeyCode::None,
                KeyCode::Backspace,
                KeyCode::Tab,
                KeyCode::Clear,
                KeyCode::Return,
                KeyCode::Pause,
                KeyCode::Escape,
                KeyCode::Space,
                KeyCode::Exclaim,
                KeyCode::Quotedbl,
                KeyCode::Hash,
                KeyCode::Dollar,
                KeyCode::Ampersand,
                KeyCode::Quote,
                KeyCode::LeftParenthesis,
                KeyCode::RightParenthesis,
                KeyCode::Asterisk,
                KeyCode::Plus,
                KeyCode::Comma,
                KeyCode::Minus,
                KeyCode::Period,
                KeyCode::Slash,
                KeyCode::Zero,
                KeyCode::One,
                KeyCode::Two,
                KeyCode::Three,
                KeyCode::Four,
                KeyCode::Five,
                KeyCode::Six,
                KeyCode::Seven,
                KeyCode::Eight,
                KeyCode::Nine,
                KeyCode::Colon,
                KeyCode::Semicolon,
                KeyCode::Less,
                KeyCode::Equals,
                KeyCode::Greater,
                KeyCode::Question,
                KeyCode::At,
                KeyCode::LeftBracket,
                KeyCode::Backslash,
                KeyCode::RightBracket,
                KeyCode::Caret,
                KeyCode::Underscore,
                KeyCode::Backquote,
                KeyCode::A,
                KeyCode::B,
                KeyCode::C,
                KeyCode::D,
                KeyCode::E,
                KeyCode::F,
                KeyCode::G,
                KeyCode::H,
                KeyCode::I,
                KeyCode::J,
                KeyCode::K,
                KeyCode::L,
                KeyCode::M,
                KeyCode::N,
                KeyCode::O,
                KeyCode::P,
                KeyCode::Q,
                KeyCode::R,
                KeyCode::S,
                KeyCode::T,
                KeyCode::U,
                KeyCode::V,
                KeyCode::W,
                KeyCode::X,
                KeyCode::Y,
                KeyCode::Z,
                KeyCode::Delete,
                KeyCode::KeyPadZero,
                KeyCode::KeyPadOne,
                KeyCode::KeyPadTwo,
                KeyCode::KeyPadThree,
                KeyCode::KeyPadFour,
                KeyCode::KeyPadFive,
                KeyCode::KeyPadSix,
                KeyCode::KeyPadSeven,
                KeyCode::KeyPadEight,
                KeyCode::KeyPadNine,
                KeyCode::KeyPadPeriod,
                KeyCode::KeyPadDivide,
                KeyCode::KeyPadMultiply,
                KeyCode::KeyPadMinus,
                KeyCode::KeyPadPlus,
                KeyCode::KeyPadEnter,
                KeyCode::KeyPadEquals,
                KeyCode::Up,
                KeyCode::Down,
                KeyCode::Right,
                KeyCode::Left,
                KeyCode::Insert,
                KeyCode::Home,
                KeyCode::End,
                KeyCode::PageUp,
                KeyCode::PageDown,
                KeyCode::F1,
                KeyCode::F2,
                KeyCode::F3,
                KeyCode::F4,
                KeyCode::F5,
                KeyCode::F6,
                KeyCode::F7,
                KeyCode::F8,
                KeyCode::F9,
                KeyCode::F10,
                KeyCode::F11,
                KeyCode::F12,
                KeyCode::F13,
                KeyCode::F14,
                KeyCode::F15,
                KeyCode::Numlock,
                KeyCode::Capslock,
                KeyCode::Scrollock,
                KeyCode::RightShift,
                KeyCode::LeftShift,
                KeyCode::RightCtrl,
                KeyCode::LeftCtrl,
                KeyCode::RightAlt,
                KeyCode::LeftAlt,
                KeyCode::LeftSuper,
                KeyCode::RightSuper,
                KeyCode::Mode,
                KeyCode::Help,
                KeyCode::Print,
                KeyCode::Sysreq,
                KeyCode::Menu,
                KeyCode::Power,
            };
            
            return returnArray;
        }

        static std::vector<KeyCode> ToVector()
        {
            static std::vector<KeyCode> returnVector =
            {
                KeyCode::None,
                KeyCode::Backspace,
                KeyCode::Tab,
                KeyCode::Clear,
                KeyCode::Return,
                KeyCode::Pause,
                KeyCode::Escape,
                KeyCode::Space,
                KeyCode::Exclaim,
                KeyCode::Quotedbl,
                KeyCode::Hash,
                KeyCode::Dollar,
                KeyCode::Ampersand,
                KeyCode::Quote,
                KeyCode::LeftParenthesis,
                KeyCode::RightParenthesis,
                KeyCode::Asterisk,
                KeyCode::Plus,
                KeyCode::Comma,
                KeyCode::Minus,
                KeyCode::Period,
                KeyCode::Slash,
                KeyCode::Zero,
                KeyCode::One,
                KeyCode::Two,
                KeyCode::Three,
                KeyCode::Four,
                KeyCode::Five,
                KeyCode::Six,
                KeyCode::Seven,
                KeyCode::Eight,
                KeyCode::Nine,
                KeyCode::Colon,
                KeyCode::Semicolon,
                KeyCode::Less,
                KeyCode::Equals,
                KeyCode::Greater,
                KeyCode::Question,
                KeyCode::At,
                KeyCode::LeftBracket,
                KeyCode::Backslash,
                KeyCode::RightBracket,
                KeyCode::Caret,
                KeyCode::Underscore,
                KeyCode::Backquote,
                KeyCode::A,
                KeyCode::B,
                KeyCode::C,
                KeyCode::D,
                KeyCode::E,
                KeyCode::F,
                KeyCode::G,
                KeyCode::H,
                KeyCode::I,
                KeyCode::J,
                KeyCode::K,
                KeyCode::L,
                KeyCode::M,
                KeyCode::N,
                KeyCode::O,
                KeyCode::P,
                KeyCode::Q,
                KeyCode::R,
                KeyCode::S,
                KeyCode::T,
                KeyCode::U,
                KeyCode::V,
                KeyCode::W,
                KeyCode::X,
                KeyCode::Y,
                KeyCode::Z,
                KeyCode::Delete,
                KeyCode::KeyPadZero,
                KeyCode::KeyPadOne,
                KeyCode::KeyPadTwo,
                KeyCode::KeyPadThree,
                KeyCode::KeyPadFour,
                KeyCode::KeyPadFive,
                KeyCode::KeyPadSix,
                KeyCode::KeyPadSeven,
                KeyCode::KeyPadEight,
                KeyCode::KeyPadNine,
                KeyCode::KeyPadPeriod,
                KeyCode::KeyPadDivide,
                KeyCode::KeyPadMultiply,
                KeyCode::KeyPadMinus,
                KeyCode::KeyPadPlus,
                KeyCode::KeyPadEnter,
                KeyCode::KeyPadEquals,
                KeyCode::Up,
                KeyCode::Down,
                KeyCode::Right,
                KeyCode::Left,
                KeyCode::Insert,
                KeyCode::Home,
                KeyCode::End,
                KeyCode::PageUp,
                KeyCode::PageDown,
                KeyCode::F1,
                KeyCode::F2,
                KeyCode::F3,
                KeyCode::F4,
                KeyCode::F5,
                KeyCode::F6,
                KeyCode::F7,
                KeyCode::F8,
                KeyCode::F9,
                KeyCode::F10,
                KeyCode::F11,
                KeyCode::F12,
                KeyCode::F13,
                KeyCode::F14,
                KeyCode::F15,
                KeyCode::Numlock,
                KeyCode::Capslock,
                KeyCode::Scrollock,
                KeyCode::RightShift,
                KeyCode::LeftShift,
                KeyCode::RightCtrl,
                KeyCode::LeftCtrl,
                KeyCode::RightAlt,
                KeyCode::LeftAlt,
                KeyCode::LeftSuper,
                KeyCode::RightSuper,
                KeyCode::Mode,
                KeyCode::Help,
                KeyCode::Print,
                KeyCode::Sysreq,
                KeyCode::Menu,
                KeyCode::Power,
            };
            
            return returnVector;
        }

        static std::string ToString(KeyCode value)
        {
            switch (value)
            {
                case KeyCode::Unknown: return "Unknown";
                case KeyCode::None: return "None";
                case KeyCode::Backspace: return "Backspace";
                case KeyCode::Tab: return "Tab";
                case KeyCode::Clear: return "Clear";
                case KeyCode::Return: return "Return";
                case KeyCode::Pause: return "Pause";
                case KeyCode::Escape: return "Escape";
                case KeyCode::Space: return "Space";
                case KeyCode::Exclaim: return "Exclaim";
                case KeyCode::Quotedbl: return "Quotedbl";
                case KeyCode::Hash: return "Hash";
                case KeyCode::Dollar: return "Dollar";
                case KeyCode::Ampersand: return "Ampersand";
                case KeyCode::Quote: return "Quote";
                case KeyCode::LeftParenthesis: return "LeftParenthesis";
                case KeyCode::RightParenthesis: return "RightParenthesis";
                case KeyCode::Asterisk: return "Asterisk";
                case KeyCode::Plus: return "Plus";
                case KeyCode::Comma: return "Comma";
                case KeyCode::Minus: return "Minus";
                case KeyCode::Period: return "Period";
                case KeyCode::Slash: return "Slash";
                case KeyCode::Zero: return "Zero";
                case KeyCode::One: return "One";
                case KeyCode::Two: return "Two";
                case KeyCode::Three: return "Three";
                case KeyCode::Four: return "Four";
                case KeyCode::Five: return "Five";
                case KeyCode::Six: return "Six";
                case KeyCode::Seven: return "Seven";
                case KeyCode::Eight: return "Eight";
                case KeyCode::Nine: return "Nine";
                case KeyCode::Colon: return "Colon";
                case KeyCode::Semicolon: return "Semicolon";
                case KeyCode::Less: return "Less";
                case KeyCode::Equals: return "Equals";
                case KeyCode::Greater: return "Greater";
                case KeyCode::Question: return "Question";
                case KeyCode::At: return "At";
                case KeyCode::LeftBracket: return "LeftBracket";
                case KeyCode::Backslash: return "Backslash";
                case KeyCode::RightBracket: return "RightBracket";
                case KeyCode::Caret: return "Caret";
                case KeyCode::Underscore: return "Underscore";
                case KeyCode::Backquote: return "Backquote";
                case KeyCode::A: return "A";
                case KeyCode::B: return "B";
                case KeyCode::C: return "C";
                case KeyCode::D: return "D";
                case KeyCode::E: return "E";
                case KeyCode::F: return "F";
                case KeyCode::G: return "G";
                case KeyCode::H: return "H";
                case KeyCode::I: return "I";
                case KeyCode::J: return "J";
                case KeyCode::K: return "K";
                case KeyCode::L: return "L";
                case KeyCode::M: return "M";
                case KeyCode::N: return "N";
                case KeyCode::O: return "O";
                case KeyCode::P: return "P";
                case KeyCode::Q: return "Q";
                case KeyCode::R: return "R";
                case KeyCode::S: return "S";
                case KeyCode::T: return "T";
                case KeyCode::U: return "U";
                case KeyCode::V: return "V";
                case KeyCode::W: return "W";
                case KeyCode::X: return "X";
                case KeyCode::Y: return "Y";
                case KeyCode::Z: return "Z";
                case KeyCode::Delete: return "Delete";
                case KeyCode::KeyPadZero: return "KeyPadZero";
                case KeyCode::KeyPadOne: return "KeyPadOne";
                case KeyCode::KeyPadTwo: return "KeyPadTwo";
                case KeyCode::KeyPadThree: return "KeyPadThree";
                case KeyCode::KeyPadFour: return "KeyPadFour";
                case KeyCode::KeyPadFive: return "KeyPadFive";
                case KeyCode::KeyPadSix: return "KeyPadSix";
                case KeyCode::KeyPadSeven: return "KeyPadSeven";
                case KeyCode::KeyPadEight: return "KeyPadEight";
                case KeyCode::KeyPadNine: return "KeyPadNine";
                case KeyCode::KeyPadPeriod: return "KeyPadPeriod";
                case KeyCode::KeyPadDivide: return "KeyPadDivide";
                case KeyCode::KeyPadMultiply: return "KeyPadMultiply";
                case KeyCode::KeyPadMinus: return "KeyPadMinus";
                case KeyCode::KeyPadPlus: return "KeyPadPlus";
                case KeyCode::KeyPadEnter: return "KeyPadEnter";
                case KeyCode::KeyPadEquals: return "KeyPadEquals";
                case KeyCode::Up: return "Up";
                case KeyCode::Down: return "Down";
                case KeyCode::Right: return "Right";
                case KeyCode::Left: return "Left";
                case KeyCode::Insert: return "Insert";
                case KeyCode::Home: return "Home";
                case KeyCode::End: return "End";
                case KeyCode::PageUp: return "PageUp";
                case KeyCode::PageDown: return "PageDown";
                case KeyCode::F1: return "F1";
                case KeyCode::F2: return "F2";
                case KeyCode::F3: return "F3";
                case KeyCode::F4: return "F4";
                case KeyCode::F5: return "F5";
                case KeyCode::F6: return "F6";
                case KeyCode::F7: return "F7";
                case KeyCode::F8: return "F8";
                case KeyCode::F9: return "F9";
                case KeyCode::F10: return "F10";
                case KeyCode::F11: return "F11";
                case KeyCode::F12: return "F12";
                case KeyCode::F13: return "F13";
                case KeyCode::F14: return "F14";
                case KeyCode::F15: return "F15";
                case KeyCode::Numlock: return "Numlock";
                case KeyCode::Capslock: return "Capslock";
                case KeyCode::Scrollock: return "Scrollock";
                case KeyCode::RightShift: return "RightShift";
                case KeyCode::LeftShift: return "LeftShift";
                case KeyCode::RightCtrl: return "RightCtrl";
                case KeyCode::LeftCtrl: return "LeftCtrl";
                case KeyCode::RightAlt: return "RightAlt";
                case KeyCode::LeftAlt: return "LeftAlt";
                case KeyCode::LeftSuper: return "LeftSuper";
                case KeyCode::RightSuper: return "RightSuper";
                case KeyCode::Mode: return "Mode";
                case KeyCode::Help: return "Help";
                case KeyCode::Print: return "Print";
                case KeyCode::Sysreq: return "Sysreq";
                case KeyCode::Menu: return "Menu";
                case KeyCode::Power: return "Power";
            }
            
            return "Unknown";
        }

        static KeyCode FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return KeyCode::Unknown;
                if (value == "None") return KeyCode::None;
                if (value == "Backspace") return KeyCode::Backspace;
                if (value == "Tab") return KeyCode::Tab;
                if (value == "Clear") return KeyCode::Clear;
                if (value == "Return") return KeyCode::Return;
                if (value == "Pause") return KeyCode::Pause;
                if (value == "Escape") return KeyCode::Escape;
                if (value == "Space") return KeyCode::Space;
                if (value == "Exclaim") return KeyCode::Exclaim;
                if (value == "Quotedbl") return KeyCode::Quotedbl;
                if (value == "Hash") return KeyCode::Hash;
                if (value == "Dollar") return KeyCode::Dollar;
                if (value == "Ampersand") return KeyCode::Ampersand;
                if (value == "Quote") return KeyCode::Quote;
                if (value == "LeftParenthesis") return KeyCode::LeftParenthesis;
                if (value == "RightParenthesis") return KeyCode::RightParenthesis;
                if (value == "Asterisk") return KeyCode::Asterisk;
                if (value == "Plus") return KeyCode::Plus;
                if (value == "Comma") return KeyCode::Comma;
                if (value == "Minus") return KeyCode::Minus;
                if (value == "Period") return KeyCode::Period;
                if (value == "Slash") return KeyCode::Slash;
                if (value == "Zero") return KeyCode::Zero;
                if (value == "One") return KeyCode::One;
                if (value == "Two") return KeyCode::Two;
                if (value == "Three") return KeyCode::Three;
                if (value == "Four") return KeyCode::Four;
                if (value == "Five") return KeyCode::Five;
                if (value == "Six") return KeyCode::Six;
                if (value == "Seven") return KeyCode::Seven;
                if (value == "Eight") return KeyCode::Eight;
                if (value == "Nine") return KeyCode::Nine;
                if (value == "Colon") return KeyCode::Colon;
                if (value == "Semicolon") return KeyCode::Semicolon;
                if (value == "Less") return KeyCode::Less;
                if (value == "Equals") return KeyCode::Equals;
                if (value == "Greater") return KeyCode::Greater;
                if (value == "Question") return KeyCode::Question;
                if (value == "At") return KeyCode::At;
                if (value == "LeftBracket") return KeyCode::LeftBracket;
                if (value == "Backslash") return KeyCode::Backslash;
                if (value == "RightBracket") return KeyCode::RightBracket;
                if (value == "Caret") return KeyCode::Caret;
                if (value == "Underscore") return KeyCode::Underscore;
                if (value == "Backquote") return KeyCode::Backquote;
                if (value == "A") return KeyCode::A;
                if (value == "B") return KeyCode::B;
                if (value == "C") return KeyCode::C;
                if (value == "D") return KeyCode::D;
                if (value == "E") return KeyCode::E;
                if (value == "F") return KeyCode::F;
                if (value == "G") return KeyCode::G;
                if (value == "H") return KeyCode::H;
                if (value == "I") return KeyCode::I;
                if (value == "J") return KeyCode::J;
                if (value == "K") return KeyCode::K;
                if (value == "L") return KeyCode::L;
                if (value == "M") return KeyCode::M;
                if (value == "N") return KeyCode::N;
                if (value == "O") return KeyCode::O;
                if (value == "P") return KeyCode::P;
                if (value == "Q") return KeyCode::Q;
                if (value == "R") return KeyCode::R;
                if (value == "S") return KeyCode::S;
                if (value == "T") return KeyCode::T;
                if (value == "U") return KeyCode::U;
                if (value == "V") return KeyCode::V;
                if (value == "W") return KeyCode::W;
                if (value == "X") return KeyCode::X;
                if (value == "Y") return KeyCode::Y;
                if (value == "Z") return KeyCode::Z;
                if (value == "Delete") return KeyCode::Delete;
                if (value == "KeyPadZero") return KeyCode::KeyPadZero;
                if (value == "KeyPadOne") return KeyCode::KeyPadOne;
                if (value == "KeyPadTwo") return KeyCode::KeyPadTwo;
                if (value == "KeyPadThree") return KeyCode::KeyPadThree;
                if (value == "KeyPadFour") return KeyCode::KeyPadFour;
                if (value == "KeyPadFive") return KeyCode::KeyPadFive;
                if (value == "KeyPadSix") return KeyCode::KeyPadSix;
                if (value == "KeyPadSeven") return KeyCode::KeyPadSeven;
                if (value == "KeyPadEight") return KeyCode::KeyPadEight;
                if (value == "KeyPadNine") return KeyCode::KeyPadNine;
                if (value == "KeyPadPeriod") return KeyCode::KeyPadPeriod;
                if (value == "KeyPadDivide") return KeyCode::KeyPadDivide;
                if (value == "KeyPadMultiply") return KeyCode::KeyPadMultiply;
                if (value == "KeyPadMinus") return KeyCode::KeyPadMinus;
                if (value == "KeyPadPlus") return KeyCode::KeyPadPlus;
                if (value == "KeyPadEnter") return KeyCode::KeyPadEnter;
                if (value == "KeyPadEquals") return KeyCode::KeyPadEquals;
                if (value == "Up") return KeyCode::Up;
                if (value == "Down") return KeyCode::Down;
                if (value == "Right") return KeyCode::Right;
                if (value == "Left") return KeyCode::Left;
                if (value == "Insert") return KeyCode::Insert;
                if (value == "Home") return KeyCode::Home;
                if (value == "End") return KeyCode::End;
                if (value == "PageUp") return KeyCode::PageUp;
                if (value == "PageDown") return KeyCode::PageDown;
                if (value == "F1") return KeyCode::F1;
                if (value == "F2") return KeyCode::F2;
                if (value == "F3") return KeyCode::F3;
                if (value == "F4") return KeyCode::F4;
                if (value == "F5") return KeyCode::F5;
                if (value == "F6") return KeyCode::F6;
                if (value == "F7") return KeyCode::F7;
                if (value == "F8") return KeyCode::F8;
                if (value == "F9") return KeyCode::F9;
                if (value == "F10") return KeyCode::F10;
                if (value == "F11") return KeyCode::F11;
                if (value == "F12") return KeyCode::F12;
                if (value == "F13") return KeyCode::F13;
                if (value == "F14") return KeyCode::F14;
                if (value == "F15") return KeyCode::F15;
                if (value == "Numlock") return KeyCode::Numlock;
                if (value == "Capslock") return KeyCode::Capslock;
                if (value == "Scrollock") return KeyCode::Scrollock;
                if (value == "RightShift") return KeyCode::RightShift;
                if (value == "LeftShift") return KeyCode::LeftShift;
                if (value == "RightCtrl") return KeyCode::RightCtrl;
                if (value == "LeftCtrl") return KeyCode::LeftCtrl;
                if (value == "RightAlt") return KeyCode::RightAlt;
                if (value == "LeftAlt") return KeyCode::LeftAlt;
                if (value == "LeftSuper") return KeyCode::LeftSuper;
                if (value == "RightSuper") return KeyCode::RightSuper;
                if (value == "Mode") return KeyCode::Mode;
                if (value == "Help") return KeyCode::Help;
                if (value == "Print") return KeyCode::Print;
                if (value == "Sysreq") return KeyCode::Sysreq;
                if (value == "Menu") return KeyCode::Menu;
                if (value == "Power") return KeyCode::Power;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return KeyCode::Unknown;
                if (valueLower == "none") return KeyCode::None;
                if (valueLower == "backspace") return KeyCode::Backspace;
                if (valueLower == "tab") return KeyCode::Tab;
                if (valueLower == "clear") return KeyCode::Clear;
                if (valueLower == "return") return KeyCode::Return;
                if (valueLower == "pause") return KeyCode::Pause;
                if (valueLower == "escape") return KeyCode::Escape;
                if (valueLower == "space") return KeyCode::Space;
                if (valueLower == "exclaim") return KeyCode::Exclaim;
                if (valueLower == "quotedbl") return KeyCode::Quotedbl;
                if (valueLower == "hash") return KeyCode::Hash;
                if (valueLower == "dollar") return KeyCode::Dollar;
                if (valueLower == "ampersand") return KeyCode::Ampersand;
                if (valueLower == "quote") return KeyCode::Quote;
                if (valueLower == "leftparenthesis") return KeyCode::LeftParenthesis;
                if (valueLower == "rightparenthesis") return KeyCode::RightParenthesis;
                if (valueLower == "asterisk") return KeyCode::Asterisk;
                if (valueLower == "plus") return KeyCode::Plus;
                if (valueLower == "comma") return KeyCode::Comma;
                if (valueLower == "minus") return KeyCode::Minus;
                if (valueLower == "period") return KeyCode::Period;
                if (valueLower == "slash") return KeyCode::Slash;
                if (valueLower == "zero") return KeyCode::Zero;
                if (valueLower == "one") return KeyCode::One;
                if (valueLower == "two") return KeyCode::Two;
                if (valueLower == "three") return KeyCode::Three;
                if (valueLower == "four") return KeyCode::Four;
                if (valueLower == "five") return KeyCode::Five;
                if (valueLower == "six") return KeyCode::Six;
                if (valueLower == "seven") return KeyCode::Seven;
                if (valueLower == "eight") return KeyCode::Eight;
                if (valueLower == "nine") return KeyCode::Nine;
                if (valueLower == "colon") return KeyCode::Colon;
                if (valueLower == "semicolon") return KeyCode::Semicolon;
                if (valueLower == "less") return KeyCode::Less;
                if (valueLower == "equals") return KeyCode::Equals;
                if (valueLower == "greater") return KeyCode::Greater;
                if (valueLower == "question") return KeyCode::Question;
                if (valueLower == "at") return KeyCode::At;
                if (valueLower == "leftbracket") return KeyCode::LeftBracket;
                if (valueLower == "backslash") return KeyCode::Backslash;
                if (valueLower == "rightbracket") return KeyCode::RightBracket;
                if (valueLower == "caret") return KeyCode::Caret;
                if (valueLower == "underscore") return KeyCode::Underscore;
                if (valueLower == "backquote") return KeyCode::Backquote;
                if (valueLower == "a") return KeyCode::A;
                if (valueLower == "b") return KeyCode::B;
                if (valueLower == "c") return KeyCode::C;
                if (valueLower == "d") return KeyCode::D;
                if (valueLower == "e") return KeyCode::E;
                if (valueLower == "f") return KeyCode::F;
                if (valueLower == "g") return KeyCode::G;
                if (valueLower == "h") return KeyCode::H;
                if (valueLower == "i") return KeyCode::I;
                if (valueLower == "j") return KeyCode::J;
                if (valueLower == "k") return KeyCode::K;
                if (valueLower == "l") return KeyCode::L;
                if (valueLower == "m") return KeyCode::M;
                if (valueLower == "n") return KeyCode::N;
                if (valueLower == "o") return KeyCode::O;
                if (valueLower == "p") return KeyCode::P;
                if (valueLower == "q") return KeyCode::Q;
                if (valueLower == "r") return KeyCode::R;
                if (valueLower == "s") return KeyCode::S;
                if (valueLower == "t") return KeyCode::T;
                if (valueLower == "u") return KeyCode::U;
                if (valueLower == "v") return KeyCode::V;
                if (valueLower == "w") return KeyCode::W;
                if (valueLower == "x") return KeyCode::X;
                if (valueLower == "y") return KeyCode::Y;
                if (valueLower == "z") return KeyCode::Z;
                if (valueLower == "delete") return KeyCode::Delete;
                if (valueLower == "keypadzero") return KeyCode::KeyPadZero;
                if (valueLower == "keypadone") return KeyCode::KeyPadOne;
                if (valueLower == "keypadtwo") return KeyCode::KeyPadTwo;
                if (valueLower == "keypadthree") return KeyCode::KeyPadThree;
                if (valueLower == "keypadfour") return KeyCode::KeyPadFour;
                if (valueLower == "keypadfive") return KeyCode::KeyPadFive;
                if (valueLower == "keypadsix") return KeyCode::KeyPadSix;
                if (valueLower == "keypadseven") return KeyCode::KeyPadSeven;
                if (valueLower == "keypadeight") return KeyCode::KeyPadEight;
                if (valueLower == "keypadnine") return KeyCode::KeyPadNine;
                if (valueLower == "keypadperiod") return KeyCode::KeyPadPeriod;
                if (valueLower == "keypaddivide") return KeyCode::KeyPadDivide;
                if (valueLower == "keypadmultiply") return KeyCode::KeyPadMultiply;
                if (valueLower == "keypadminus") return KeyCode::KeyPadMinus;
                if (valueLower == "keypadplus") return KeyCode::KeyPadPlus;
                if (valueLower == "keypadenter") return KeyCode::KeyPadEnter;
                if (valueLower == "keypadequals") return KeyCode::KeyPadEquals;
                if (valueLower == "up") return KeyCode::Up;
                if (valueLower == "down") return KeyCode::Down;
                if (valueLower == "right") return KeyCode::Right;
                if (valueLower == "left") return KeyCode::Left;
                if (valueLower == "insert") return KeyCode::Insert;
                if (valueLower == "home") return KeyCode::Home;
                if (valueLower == "end") return KeyCode::End;
                if (valueLower == "pageup") return KeyCode::PageUp;
                if (valueLower == "pagedown") return KeyCode::PageDown;
                if (valueLower == "f1") return KeyCode::F1;
                if (valueLower == "f2") return KeyCode::F2;
                if (valueLower == "f3") return KeyCode::F3;
                if (valueLower == "f4") return KeyCode::F4;
                if (valueLower == "f5") return KeyCode::F5;
                if (valueLower == "f6") return KeyCode::F6;
                if (valueLower == "f7") return KeyCode::F7;
                if (valueLower == "f8") return KeyCode::F8;
                if (valueLower == "f9") return KeyCode::F9;
                if (valueLower == "f10") return KeyCode::F10;
                if (valueLower == "f11") return KeyCode::F11;
                if (valueLower == "f12") return KeyCode::F12;
                if (valueLower == "f13") return KeyCode::F13;
                if (valueLower == "f14") return KeyCode::F14;
                if (valueLower == "f15") return KeyCode::F15;
                if (valueLower == "numlock") return KeyCode::Numlock;
                if (valueLower == "capslock") return KeyCode::Capslock;
                if (valueLower == "scrollock") return KeyCode::Scrollock;
                if (valueLower == "rightshift") return KeyCode::RightShift;
                if (valueLower == "leftshift") return KeyCode::LeftShift;
                if (valueLower == "rightctrl") return KeyCode::RightCtrl;
                if (valueLower == "leftctrl") return KeyCode::LeftCtrl;
                if (valueLower == "rightalt") return KeyCode::RightAlt;
                if (valueLower == "leftalt") return KeyCode::LeftAlt;
                if (valueLower == "leftsuper") return KeyCode::LeftSuper;
                if (valueLower == "rightsuper") return KeyCode::RightSuper;
                if (valueLower == "mode") return KeyCode::Mode;
                if (valueLower == "help") return KeyCode::Help;
                if (valueLower == "print") return KeyCode::Print;
                if (valueLower == "sysreq") return KeyCode::Sysreq;
                if (valueLower == "menu") return KeyCode::Menu;
                if (valueLower == "power") return KeyCode::Power;
            }
            
            return KeyCode::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
