#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameTools
{
    /// <summary>
    /// Describes the new information discovered about the file system and the files upon it.
    /// </summary>
    enum class FileUpdateAction : uint8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = 0,

        /// <summary>
        /// File was newly discovered.
        /// </summary>
        Added,

        /// <summary>
        /// A file can no longer be found.
        /// </summary>
        Removed,

        /// <summary>
        /// A file has been modified.
        /// </summary>
        Updated,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EFileUpdateAction
    {
    public:
        static FileUpdateAction Min() { return FileUpdateAction::Added; }
        static FileUpdateAction Max() { return FileUpdateAction::Updated; }

        static FileUpdateAction* ToArray()
        {
            static FileUpdateAction returnArray[] =
            {
                FileUpdateAction::Added,
                FileUpdateAction::Removed,
                FileUpdateAction::Updated,
            };
            
            return returnArray;
        }

        static std::vector<FileUpdateAction> ToVector()
        {
            static std::vector<FileUpdateAction> returnVector =
            {
                FileUpdateAction::Added,
                FileUpdateAction::Removed,
                FileUpdateAction::Updated,
            };
            
            return returnVector;
        }

        static std::string ToString(FileUpdateAction value)
        {
            switch (value)
            {
                case FileUpdateAction::Unknown: return "Unknown";
                case FileUpdateAction::Added: return "Added";
                case FileUpdateAction::Removed: return "Removed";
                case FileUpdateAction::Updated: return "Updated";
            }
            
            return "Unknown";
        }

        static FileUpdateAction FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return FileUpdateAction::Unknown;
                if (value == "Added") return FileUpdateAction::Added;
                if (value == "Removed") return FileUpdateAction::Removed;
                if (value == "Updated") return FileUpdateAction::Updated;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return FileUpdateAction::Unknown;
                if (valueLower == "added") return FileUpdateAction::Added;
                if (valueLower == "removed") return FileUpdateAction::Removed;
                if (valueLower == "updated") return FileUpdateAction::Updated;
            }
            
            return FileUpdateAction::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
