#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameTools
{
    /// <summary>
    /// Describes how a template might figure out if a given file is in fact the template
    /// for which it is defined. For instance does the file path make a match.
    /// </summary>
    enum class AssetTemplateMatchingStyle : uint8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = 0,

        /// <summary>
        /// The extension matches the given template.
        /// </summary>
        Extension,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EAssetTemplateMatchingStyle
    {
    public:
        static AssetTemplateMatchingStyle Min() { return AssetTemplateMatchingStyle::Extension; }
        static AssetTemplateMatchingStyle Max() { return AssetTemplateMatchingStyle::Extension; }

        static AssetTemplateMatchingStyle* ToArray()
        {
            static AssetTemplateMatchingStyle returnArray[] =
            {
                AssetTemplateMatchingStyle::Extension,
            };
            
            return returnArray;
        }

        static std::vector<AssetTemplateMatchingStyle> ToVector()
        {
            static std::vector<AssetTemplateMatchingStyle> returnVector =
            {
                AssetTemplateMatchingStyle::Extension,
            };
            
            return returnVector;
        }

        static std::string ToString(AssetTemplateMatchingStyle value)
        {
            switch (value)
            {
                case AssetTemplateMatchingStyle::Unknown: return "Unknown";
                case AssetTemplateMatchingStyle::Extension: return "Extension";
            }
            
            return "Unknown";
        }

        static AssetTemplateMatchingStyle FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return AssetTemplateMatchingStyle::Unknown;
                if (value == "Extension") return AssetTemplateMatchingStyle::Extension;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return AssetTemplateMatchingStyle::Unknown;
                if (valueLower == "extension") return AssetTemplateMatchingStyle::Extension;
            }
            
            return AssetTemplateMatchingStyle::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
