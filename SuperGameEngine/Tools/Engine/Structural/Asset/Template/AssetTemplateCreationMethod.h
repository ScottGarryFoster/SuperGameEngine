#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameTools
{
    /// <summary>
    /// The method used to create a brand new asset file.
    /// </summary>
    enum class AssetTemplateCreationMethod : uint8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = 0,

        /// <summary>
        /// Takes the child elements and simply uses a string replace to make it specific.
        /// </summary>
        Simple,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EAssetTemplateCreationMethod
    {
    public:
        static AssetTemplateCreationMethod Min() { return AssetTemplateCreationMethod::Simple; }
        static AssetTemplateCreationMethod Max() { return AssetTemplateCreationMethod::Simple; }

        static AssetTemplateCreationMethod* ToArray()
        {
            static AssetTemplateCreationMethod returnArray[] =
            {
                AssetTemplateCreationMethod::Simple,
            };
            
            return returnArray;
        }

        static std::vector<AssetTemplateCreationMethod> ToVector()
        {
            static std::vector<AssetTemplateCreationMethod> returnVector =
            {
                AssetTemplateCreationMethod::Simple,
            };
            
            return returnVector;
        }

        static std::string ToString(AssetTemplateCreationMethod value)
        {
            switch (value)
            {
                case AssetTemplateCreationMethod::Unknown: return "Unknown";
                case AssetTemplateCreationMethod::Simple: return "Simple";
            }
            
            return "Unknown";
        }

        static AssetTemplateCreationMethod FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return AssetTemplateCreationMethod::Unknown;
                if (value == "Simple") return AssetTemplateCreationMethod::Simple;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return AssetTemplateCreationMethod::Unknown;
                if (valueLower == "simple") return AssetTemplateCreationMethod::Simple;
            }
            
            return AssetTemplateCreationMethod::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
