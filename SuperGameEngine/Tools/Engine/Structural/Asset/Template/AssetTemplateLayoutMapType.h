#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameTools
{
    /// <summary>
    /// The type of the collection stored within the mapping.
    /// </summary>
    enum class AssetTemplateLayoutMapType : uint8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = 0,

        /// <summary>
        /// Edit only the exact Map value.
        /// </summary>
        Single,

        /// <summary>
        /// Edit by appending a number with Array values.
        /// </summary>
        Array,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EAssetTemplateLayoutMapType
    {
    public:
        static AssetTemplateLayoutMapType Min() { return AssetTemplateLayoutMapType::Single; }
        static AssetTemplateLayoutMapType Max() { return AssetTemplateLayoutMapType::Array; }

        static AssetTemplateLayoutMapType* ToArray()
        {
            static AssetTemplateLayoutMapType returnArray[] =
            {
                AssetTemplateLayoutMapType::Single,
                AssetTemplateLayoutMapType::Array,
            };
            
            return returnArray;
        }

        static std::vector<AssetTemplateLayoutMapType> ToVector()
        {
            static std::vector<AssetTemplateLayoutMapType> returnVector =
            {
                AssetTemplateLayoutMapType::Single,
                AssetTemplateLayoutMapType::Array,
            };
            
            return returnVector;
        }

        static std::string ToString(AssetTemplateLayoutMapType value)
        {
            switch (value)
            {
                case AssetTemplateLayoutMapType::Unknown: return "Unknown";
                case AssetTemplateLayoutMapType::Single: return "Single";
                case AssetTemplateLayoutMapType::Array: return "Array";
            }
            
            return "Unknown";
        }

        static AssetTemplateLayoutMapType FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return AssetTemplateLayoutMapType::Unknown;
                if (value == "Single") return AssetTemplateLayoutMapType::Single;
                if (value == "Array") return AssetTemplateLayoutMapType::Array;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return AssetTemplateLayoutMapType::Unknown;
                if (valueLower == "single") return AssetTemplateLayoutMapType::Single;
                if (valueLower == "array") return AssetTemplateLayoutMapType::Array;
            }
            
            return AssetTemplateLayoutMapType::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
