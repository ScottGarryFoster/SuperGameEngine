#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameTools
{
    /// <summary>
    /// Describes interactions to the Asset Tiles rendered via the Asset Browser.
    /// </summary>
    enum class AssetTileInteractionRawState : uint8_t
    {
        /// <summary>
        /// No hover or interaction.
        /// </summary>
        NoInteraction = 0,

        /// <summary>
        /// Tile is hovered or should be rendered as such.
        /// If this is not paired with an action assume only hover has occured.
        /// </summary>
        Hover = 1 << 0,

        /// <summary>
        /// Left click is currently down.
        /// </summary>
        LeftClickDown = 1 << 1,

        /// <summary>
        /// Left click was down and now has been released.
        /// </summary>
        LeftClickReleased = 1 << 2,
    };

    inline AssetTileInteractionRawState operator | (AssetTileInteractionRawState lhs, AssetTileInteractionRawState rhs)
    {
        using T = std::underlying_type_t <AssetTileInteractionRawState>;
        return static_cast<AssetTileInteractionRawState>(static_cast<T>(lhs) | static_cast<T>(rhs));
    }

    inline AssetTileInteractionRawState& operator |= (AssetTileInteractionRawState& lhs, AssetTileInteractionRawState rhs)
    {
        lhs = lhs | rhs;
        return lhs;
    }

    inline AssetTileInteractionRawState operator & (AssetTileInteractionRawState lhs, AssetTileInteractionRawState rhs)
    {
        using T = std::underlying_type_t <AssetTileInteractionRawState>;
        return static_cast<AssetTileInteractionRawState>(static_cast<T>(lhs) & static_cast<T>(rhs));
    }

    inline AssetTileInteractionRawState& operator &= (AssetTileInteractionRawState& lhs, AssetTileInteractionRawState rhs)
    {
        lhs = lhs | rhs;
        return lhs;
    }

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EAssetTileInteractionRawState
    {
    public:
        static AssetTileInteractionRawState Min() { return AssetTileInteractionRawState::NoInteraction; }
        static AssetTileInteractionRawState Max() { return AssetTileInteractionRawState::LeftClickReleased; }

        static AssetTileInteractionRawState* ToArray()
        {
            static AssetTileInteractionRawState returnArray[] =
            {
                AssetTileInteractionRawState::NoInteraction,
                AssetTileInteractionRawState::Hover,
                AssetTileInteractionRawState::LeftClickDown,
                AssetTileInteractionRawState::LeftClickReleased,
            };
            
            return returnArray;
        }

        static std::vector<AssetTileInteractionRawState> ToVector()
        {
            static std::vector<AssetTileInteractionRawState> returnVector =
            {
                AssetTileInteractionRawState::NoInteraction,
                AssetTileInteractionRawState::Hover,
                AssetTileInteractionRawState::LeftClickDown,
                AssetTileInteractionRawState::LeftClickReleased,
            };
            
            return returnVector;
        }

        static std::vector<std::string> ToVectorValues()
        {
            static std::vector<std::string> returnVector =
            {
                "NoInteraction",
                "Hover",
                "LeftClickDown",
                "LeftClickReleased",
            };
            
            return returnVector;
        }

        static std::string ToString(AssetTileInteractionRawState value)
        {
            switch (value)
            {
                case AssetTileInteractionRawState::NoInteraction: return "NoInteraction";
                case AssetTileInteractionRawState::Hover: return "Hover";
                case AssetTileInteractionRawState::LeftClickDown: return "LeftClickDown";
                case AssetTileInteractionRawState::LeftClickReleased: return "LeftClickReleased";
            }
            
            return "NoInteraction";
        }

        static AssetTileInteractionRawState FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "NoInteraction") return AssetTileInteractionRawState::NoInteraction;
                if (value == "Hover") return AssetTileInteractionRawState::Hover;
                if (value == "LeftClickDown") return AssetTileInteractionRawState::LeftClickDown;
                if (value == "LeftClickReleased") return AssetTileInteractionRawState::LeftClickReleased;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "nointeraction") return AssetTileInteractionRawState::NoInteraction;
                if (valueLower == "hover") return AssetTileInteractionRawState::Hover;
                if (valueLower == "leftclickdown") return AssetTileInteractionRawState::LeftClickDown;
                if (valueLower == "leftclickreleased") return AssetTileInteractionRawState::LeftClickReleased;
            }
            
            return AssetTileInteractionRawState::NoInteraction;
        }

        /// <summary>
        /// Test to see whether value has the given flag.
        /// </summary>
        /// <param name="origin">Origin to look for flag in. </param>
        /// <param name="lookFor">Value to look for. </param>
        /// <returns>True means has flag. </returns>
        static bool HasFlag(AssetTileInteractionRawState origin, AssetTileInteractionRawState lookFor)
        {
            return (origin & lookFor) != AssetTileInteractionRawState::NoInteraction;
        }
    
 private:

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
