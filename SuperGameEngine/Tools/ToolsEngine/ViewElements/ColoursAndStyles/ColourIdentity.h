#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameTools
{
    /// <summary>
    /// The type of colour refered to as a general type.
    /// </summary>
    enum class ColourIdentity : int8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// The background.
        /// </summary>
        Background,

        /// <summary>
        /// Most used colour.
        /// </summary>
        Primary,

        /// <summary>
        /// Compliments the primary but also draws the eye.
        /// </summary>
        Highlight,

        /// <summary>
        /// Second most used colour.
        /// </summary>
        Secondary,

        /// <summary>
        /// Alerting the user to an error.
        /// </summary>
        Error,

        /// <summary>
        /// Alerting the user to a warning.
        /// </summary>
        Warning,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EColourIdentity
    {
    public:
        static ColourIdentity Min() { return ColourIdentity::Background; }
        static ColourIdentity Max() { return ColourIdentity::Warning; }

        static ColourIdentity* ToArray()
        {
            static ColourIdentity returnArray[] =
            {
                ColourIdentity::Background,
                ColourIdentity::Primary,
                ColourIdentity::Highlight,
                ColourIdentity::Secondary,
                ColourIdentity::Error,
                ColourIdentity::Warning,
            };
            
            return returnArray;
        }

        static std::vector<ColourIdentity> ToVector()
        {
            static std::vector<ColourIdentity> returnVector =
            {
                ColourIdentity::Background,
                ColourIdentity::Primary,
                ColourIdentity::Highlight,
                ColourIdentity::Secondary,
                ColourIdentity::Error,
                ColourIdentity::Warning,
            };
            
            return returnVector;
        }

        static std::string ToString(ColourIdentity value)
        {
            switch (value)
            {
                case ColourIdentity::Unknown: return "Unknown";
                case ColourIdentity::Background: return "Background";
                case ColourIdentity::Primary: return "Primary";
                case ColourIdentity::Highlight: return "Highlight";
                case ColourIdentity::Secondary: return "Secondary";
                case ColourIdentity::Error: return "Error";
                case ColourIdentity::Warning: return "Warning";
            }
            
            return "Unknown";
        }

        static ColourIdentity FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return ColourIdentity::Unknown;
                if (value == "Background") return ColourIdentity::Background;
                if (value == "Primary") return ColourIdentity::Primary;
                if (value == "Highlight") return ColourIdentity::Highlight;
                if (value == "Secondary") return ColourIdentity::Secondary;
                if (value == "Error") return ColourIdentity::Error;
                if (value == "Warning") return ColourIdentity::Warning;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return ColourIdentity::Unknown;
                if (valueLower == "background") return ColourIdentity::Background;
                if (valueLower == "primary") return ColourIdentity::Primary;
                if (valueLower == "highlight") return ColourIdentity::Highlight;
                if (valueLower == "secondary") return ColourIdentity::Secondary;
                if (valueLower == "error") return ColourIdentity::Error;
                if (valueLower == "warning") return ColourIdentity::Warning;
            }
            
            return ColourIdentity::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
