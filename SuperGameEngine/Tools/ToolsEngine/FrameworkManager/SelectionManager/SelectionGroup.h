#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameTools
{
    /// <summary>
    /// Describes the group for the selectable which helps to decide the
    /// buckets that the selectable will be added to.
    /// </summary>
    enum class SelectionGroup
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// A selection which can be inspected in the inspection window.
        /// </summary>
        Inspectable,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class ESelectionGroup
    {
    public:
        static SelectionGroup Min() { return SelectionGroup::Inspectable; }
        static SelectionGroup Max() { return SelectionGroup::Inspectable; }

        static SelectionGroup* ToArray()
        {
            static SelectionGroup returnArray[] =
            {
                SelectionGroup::Inspectable,
            };
            
            return returnArray;
        }

        static std::vector<SelectionGroup> ToVector()
        {
            static std::vector<SelectionGroup> returnVector =
            {
                SelectionGroup::Inspectable,
            };
            
            return returnVector;
        }

        static std::string ToString(SelectionGroup value)
        {
            switch (value)
            {
                case SelectionGroup::Unknown: return "Unknown";
                case SelectionGroup::Inspectable: return "Inspectable";
            }
            
            return "Unknown";
        }

        static SelectionGroup FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return SelectionGroup::Unknown;
                if (value == "Inspectable") return SelectionGroup::Inspectable;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return SelectionGroup::Unknown;
                if (valueLower == "inspectable") return SelectionGroup::Inspectable;
            }
            
            return SelectionGroup::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
