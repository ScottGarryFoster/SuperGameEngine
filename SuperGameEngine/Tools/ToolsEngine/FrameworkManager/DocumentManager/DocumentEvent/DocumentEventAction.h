#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameTools
{
    /// <summary>
    /// What occured to trigger the event.
    /// </summary>
    enum class DocumentEventAction : int8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// Document is being openned.
        /// </summary>
        Open,

        /// <summary>
        /// Document needs to be saved.
        /// </summary>
        Save,

        /// <summary>
        /// Document is being closed.
        /// </summary>
        Close,

        /// <summary>
        /// Document contents has changed and should be reloaded.
        /// </summary>
        Reload,

        /// <summary>
        /// Create new document.
        /// </summary>
        Create,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EDocumentEventAction
    {
    public:
        static DocumentEventAction Min() { return DocumentEventAction::Open; }
        static DocumentEventAction Max() { return DocumentEventAction::Create; }

        static DocumentEventAction* ToArray()
        {
            static DocumentEventAction returnArray[] =
            {
                DocumentEventAction::Open,
                DocumentEventAction::Save,
                DocumentEventAction::Close,
                DocumentEventAction::Reload,
                DocumentEventAction::Create,
            };
            
            return returnArray;
        }

        static std::vector<DocumentEventAction> ToVector()
        {
            static std::vector<DocumentEventAction> returnVector =
            {
                DocumentEventAction::Open,
                DocumentEventAction::Save,
                DocumentEventAction::Close,
                DocumentEventAction::Reload,
                DocumentEventAction::Create,
            };
            
            return returnVector;
        }

        static std::string ToString(DocumentEventAction value)
        {
            switch (value)
            {
                case DocumentEventAction::Unknown: return "Unknown";
                case DocumentEventAction::Open: return "Open";
                case DocumentEventAction::Save: return "Save";
                case DocumentEventAction::Close: return "Close";
                case DocumentEventAction::Reload: return "Reload";
                case DocumentEventAction::Create: return "Create";
            }
            
            return "Unknown";
        }

        static DocumentEventAction FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return DocumentEventAction::Unknown;
                if (value == "Open") return DocumentEventAction::Open;
                if (value == "Save") return DocumentEventAction::Save;
                if (value == "Close") return DocumentEventAction::Close;
                if (value == "Reload") return DocumentEventAction::Reload;
                if (value == "Create") return DocumentEventAction::Create;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return DocumentEventAction::Unknown;
                if (valueLower == "open") return DocumentEventAction::Open;
                if (valueLower == "save") return DocumentEventAction::Save;
                if (valueLower == "close") return DocumentEventAction::Close;
                if (valueLower == "reload") return DocumentEventAction::Reload;
                if (valueLower == "create") return DocumentEventAction::Create;
            }
            
            return DocumentEventAction::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
