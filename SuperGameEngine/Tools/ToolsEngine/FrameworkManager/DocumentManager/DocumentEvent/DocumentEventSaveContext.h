#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameTools
{
    /// <summary>
    /// How to save documents.
    /// </summary>
    enum class DocumentEventSaveContext : int8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// Only save the given document if you have it or save things related to it.
        /// </summary>
        GivenDocument,

        /// <summary>
        /// Everything in the scene should be saved.
        /// </summary>
        Everything,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EDocumentEventSaveContext
    {
    public:
        static DocumentEventSaveContext Min() { return DocumentEventSaveContext::GivenDocument; }
        static DocumentEventSaveContext Max() { return DocumentEventSaveContext::Everything; }

        static DocumentEventSaveContext* ToArray()
        {
            static DocumentEventSaveContext returnArray[] =
            {
                DocumentEventSaveContext::GivenDocument,
                DocumentEventSaveContext::Everything,
            };
            
            return returnArray;
        }

        static std::vector<DocumentEventSaveContext> ToVector()
        {
            static std::vector<DocumentEventSaveContext> returnVector =
            {
                DocumentEventSaveContext::GivenDocument,
                DocumentEventSaveContext::Everything,
            };
            
            return returnVector;
        }

        static std::vector<std::string> ToVectorValues()
        {
            static std::vector<std::string> returnVector =
            {
                "GivenDocument",
                "Everything",
            };
            
            return returnVector;
        }

        static std::string ToString(DocumentEventSaveContext value)
        {
            switch (value)
            {
                case DocumentEventSaveContext::Unknown: return "Unknown";
                case DocumentEventSaveContext::GivenDocument: return "GivenDocument";
                case DocumentEventSaveContext::Everything: return "Everything";
            }
            
            return "Unknown";
        }

        static DocumentEventSaveContext FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return DocumentEventSaveContext::Unknown;
                if (value == "GivenDocument") return DocumentEventSaveContext::GivenDocument;
                if (value == "Everything") return DocumentEventSaveContext::Everything;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return DocumentEventSaveContext::Unknown;
                if (valueLower == "givendocument") return DocumentEventSaveContext::GivenDocument;
                if (valueLower == "everything") return DocumentEventSaveContext::Everything;
            }
            
            return DocumentEventSaveContext::Unknown;
        }
    
 private:

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
