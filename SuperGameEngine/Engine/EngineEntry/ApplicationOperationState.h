#pragma once
#include "../FatedQuestReferences.h"
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// Date: 2024/11/30 20:37:32
// +------------------------------+
namespace SuperGameEngine
{
    /// <summary>
    /// The state the application is currently in or should change to.
    /// </summary>
    enum class ApplicationOperationState
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// The application is currently running.
        /// If this is returned as a state, ensure the application continues to run.
        /// </summary>
        Running,

        /// <summary>
        /// The application is currently closing.
        /// If this is returned as a state, close the application at the next opertunity.
        /// </summary>
        Close,

        /// <summary>
        /// The application is currently restarting.
        /// If this is returned as a state, restart the application at the next opertunity.
        /// </summary>
        Restart,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EApplicationOperationState
    {
    public:
        static ApplicationOperationState Min() { return ApplicationOperationState::Running; }
        static ApplicationOperationState Max() { return ApplicationOperationState::Restart; }

        static ApplicationOperationState* ToArray()
        {
            static ApplicationOperationState returnArray[] =
            {
                ApplicationOperationState::Running,
                ApplicationOperationState::Close,
                ApplicationOperationState::Restart,
            };
            
            return returnArray;
        }

        static std::vector<ApplicationOperationState> ToVector()
        {
            static std::vector<ApplicationOperationState> returnVector =
            {
                ApplicationOperationState::Running,
                ApplicationOperationState::Close,
                ApplicationOperationState::Restart,
            };
            
            return returnVector;
        }

        static std::string ToString(ApplicationOperationState value)
        {
            switch (value)
            {
                case ApplicationOperationState::Unknown: return "Unknown";
                case ApplicationOperationState::Running: return "Running";
                case ApplicationOperationState::Close: return "Close";
                case ApplicationOperationState::Restart: return "Restart";
            }
            
            return "Unknown";
        }

        static ApplicationOperationState FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return ApplicationOperationState::Unknown;
                if (value == "Running") return ApplicationOperationState::Running;
                if (value == "Close") return ApplicationOperationState::Close;
                if (value == "Restart") return ApplicationOperationState::Restart;
            }
            else
            {
                std::string valueLower = FatedQuestLibraries::StringHelpers::ToLower(value); 
                if (valueLower == "unknown") return ApplicationOperationState::Unknown;
                if (valueLower == "running") return ApplicationOperationState::Running;
                if (valueLower == "close") return ApplicationOperationState::Close;
                if (valueLower == "restart") return ApplicationOperationState::Restart;
            }
            
            return ApplicationOperationState::Unknown;
        }
    };
}
