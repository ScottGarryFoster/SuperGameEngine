#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameEngine
{
    /// <summary>
    /// The state the pointer is in.
    /// Used to determine if the pointer is safe to use or should be discarded.
    /// </summary>
    enum class PointerState
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// There is value.
        /// </summary>
        Active,

        /// <summary>
        /// The pointer is destroyed. This should be discarded.
        /// </summary>
        Destroyed,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EPointerState
    {
    public:
        static PointerState Min() { return PointerState::Active; }
        static PointerState Max() { return PointerState::Destroyed; }

        static PointerState* ToArray()
        {
            static PointerState returnArray[] =
            {
                PointerState::Active,
                PointerState::Destroyed,
            };
            
            return returnArray;
        }

        static std::vector<PointerState> ToVector()
        {
            static std::vector<PointerState> returnVector =
            {
                PointerState::Active,
                PointerState::Destroyed,
            };
            
            return returnVector;
        }

        static std::string ToString(PointerState value)
        {
            switch (value)
            {
                case PointerState::Unknown: return "Unknown";
                case PointerState::Active: return "Active";
                case PointerState::Destroyed: return "Destroyed";
            }
            
            return "Unknown";
        }

        static PointerState FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return PointerState::Unknown;
                if (value == "Active") return PointerState::Active;
                if (value == "Destroyed") return PointerState::Destroyed;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return PointerState::Unknown;
                if (valueLower == "active") return PointerState::Active;
                if (valueLower == "destroyed") return PointerState::Destroyed;
            }
            
            return PointerState::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
