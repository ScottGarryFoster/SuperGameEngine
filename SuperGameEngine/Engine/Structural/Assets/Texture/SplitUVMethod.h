#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace SuperGameEngine
{
    /// <summary>
    /// The method to split the UVs upon the texture.
    /// This ensures we can define several methods which can be later be read in,
    /// without defaulting to always using the in tool define method which would be
    /// slower when loading say a large uniform tileset.
    /// </summary>
    enum class SplitUVMethod : uint8_t
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = 0,

        /// <summary>
        /// All tiles are predefined in the asset file.
        /// </summary>
        Predefined,

        /// <summary>
        /// A width and height is defined across the entire image.
        /// These are all the tiles.
        /// </summary>
        UniformByPixel,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class ESplitUVMethod
    {
    public:
        static SplitUVMethod Min() { return SplitUVMethod::Predefined; }
        static SplitUVMethod Max() { return SplitUVMethod::UniformByPixel; }

        static SplitUVMethod* ToArray()
        {
            static SplitUVMethod returnArray[] =
            {
                SplitUVMethod::Predefined,
                SplitUVMethod::UniformByPixel,
            };
            
            return returnArray;
        }

        static std::vector<SplitUVMethod> ToVector()
        {
            static std::vector<SplitUVMethod> returnVector =
            {
                SplitUVMethod::Predefined,
                SplitUVMethod::UniformByPixel,
            };
            
            return returnVector;
        }

        static std::vector<std::string> ToVectorValues()
        {
            static std::vector<std::string> returnVector =
            {
                "Predefined",
                "UniformByPixel",
            };
            
            return returnVector;
        }

        static std::string ToString(SplitUVMethod value)
        {
            switch (value)
            {
                case SplitUVMethod::Unknown: return "Unknown";
                case SplitUVMethod::Predefined: return "Predefined";
                case SplitUVMethod::UniformByPixel: return "UniformByPixel";
            }
            
            return "Unknown";
        }

        static SplitUVMethod FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return SplitUVMethod::Unknown;
                if (value == "Predefined") return SplitUVMethod::Predefined;
                if (value == "UniformByPixel") return SplitUVMethod::UniformByPixel;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return SplitUVMethod::Unknown;
                if (valueLower == "predefined") return SplitUVMethod::Predefined;
                if (valueLower == "uniformbypixel") return SplitUVMethod::UniformByPixel;
            }
            
            return SplitUVMethod::Unknown;
        }
    
 private:

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
