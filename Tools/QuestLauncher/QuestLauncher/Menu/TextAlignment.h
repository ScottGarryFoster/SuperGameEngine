#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace QuestLauncher
{
    /// <summary>
    /// How to align text
    /// </summary>
    enum class TextAlignment
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// Left side.
        /// </summary>
        Left,

        /// <summary>
        /// In the center.
        /// </summary>
        Center,

        /// <summary>
        /// Right side.
        /// </summary>
        Right,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class ETextAlignment
    {
    public:
        static TextAlignment Min() { return TextAlignment::Left; }
        static TextAlignment Max() { return TextAlignment::Right; }

        static TextAlignment* ToArray()
        {
            static TextAlignment returnArray[] =
            {
                TextAlignment::Left,
                TextAlignment::Center,
                TextAlignment::Right,
            };
            
            return returnArray;
        }

        static std::vector<TextAlignment> ToVector()
        {
            static std::vector<TextAlignment> returnVector =
            {
                TextAlignment::Left,
                TextAlignment::Center,
                TextAlignment::Right,
            };
            
            return returnVector;
        }

        static std::string ToString(TextAlignment value)
        {
            switch (value)
            {
                case TextAlignment::Unknown: return "Unknown";
                case TextAlignment::Left: return "Left";
                case TextAlignment::Center: return "Center";
                case TextAlignment::Right: return "Right";
            }
            
            return "Unknown";
        }

        static TextAlignment FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return TextAlignment::Unknown;
                if (value == "Left") return TextAlignment::Left;
                if (value == "Center") return TextAlignment::Center;
                if (value == "Right") return TextAlignment::Right;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return TextAlignment::Unknown;
                if (valueLower == "left") return TextAlignment::Left;
                if (valueLower == "center") return TextAlignment::Center;
                if (valueLower == "right") return TextAlignment::Right;
            }
            
            return TextAlignment::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
