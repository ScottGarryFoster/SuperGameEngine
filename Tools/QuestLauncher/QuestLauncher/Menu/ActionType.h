#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace QuestLauncher
{
    /// <summary>
    /// The method to handle running this menu item.
    /// </summary>
    enum class ActionType
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// Run a custom method.
        /// </summary>
        Custom,

        /// <summary>
        /// Show the application window
        /// </summary>
        ShowWindow,

        /// <summary>
        /// Close the application
        /// </summary>
        Close,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EActionType
    {
    public:
        static ActionType Min() { return ActionType::Custom; }
        static ActionType Max() { return ActionType::Close; }

        static ActionType* ToArray()
        {
            static ActionType returnArray[] =
            {
                ActionType::Custom,
                ActionType::ShowWindow,
                ActionType::Close,
            };
            
            return returnArray;
        }

        static std::vector<ActionType> ToVector()
        {
            static std::vector<ActionType> returnVector =
            {
                ActionType::Custom,
                ActionType::ShowWindow,
                ActionType::Close,
            };
            
            return returnVector;
        }

        static std::string ToString(ActionType value)
        {
            switch (value)
            {
                case ActionType::Unknown: return "Unknown";
                case ActionType::Custom: return "Custom";
                case ActionType::ShowWindow: return "ShowWindow";
                case ActionType::Close: return "Close";
            }
            
            return "Unknown";
        }

        static ActionType FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return ActionType::Unknown;
                if (value == "Custom") return ActionType::Custom;
                if (value == "ShowWindow") return ActionType::ShowWindow;
                if (value == "Close") return ActionType::Close;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return ActionType::Unknown;
                if (valueLower == "custom") return ActionType::Custom;
                if (valueLower == "showwindow") return ActionType::ShowWindow;
                if (valueLower == "close") return ActionType::Close;
            }
            
            return ActionType::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
