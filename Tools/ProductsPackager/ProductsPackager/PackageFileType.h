#pragma once
#include <vector>
#include <string>


// +------------------------------+
// Generated by SuperGenerator as an
// SuperEnum. See Tools for details.
// +------------------------------+
namespace ProductsPackager
{
    /// <summary>
    /// The form the file should take once packaged.
    /// </summary>
    enum class PackageFileType
    {
        /// <summary>
        /// Only used for unsuccessful parsing.
        /// </summary>
        Unknown = -1,

        /// <summary>
        /// Raw unbinary file form. The files will not be changed.
        /// </summary>
        Untouched,

        /// <summary>
        /// The files will be converted to raw binary.
        /// </summary>
        Binary,
    };

    /// <summary>
    /// Accompanies enums to provide extra functionality.
    /// </summary>
    class EPackageFileType
    {
    public:
        static PackageFileType Min() { return PackageFileType::Untouched; }
        static PackageFileType Max() { return PackageFileType::Binary; }

        static PackageFileType* ToArray()
        {
            static PackageFileType returnArray[] =
            {
                PackageFileType::Untouched,
                PackageFileType::Binary,
            };
            
            return returnArray;
        }

        static std::vector<PackageFileType> ToVector()
        {
            static std::vector<PackageFileType> returnVector =
            {
                PackageFileType::Untouched,
                PackageFileType::Binary,
            };
            
            return returnVector;
        }

        static std::string ToString(PackageFileType value)
        {
            switch (value)
            {
                case PackageFileType::Unknown: return "Unknown";
                case PackageFileType::Untouched: return "Untouched";
                case PackageFileType::Binary: return "Binary";
            }
            
            return "Unknown";
        }

        static PackageFileType FromString(std::string value, bool checkCase = true)
        {
            if (checkCase)
            {
                if (value == "Unknown") return PackageFileType::Unknown;
                if (value == "Untouched") return PackageFileType::Untouched;
                if (value == "Binary") return PackageFileType::Binary;
            }
            else
            {
                std::string valueLower = ToLower(value); 
                if (valueLower == "unknown") return PackageFileType::Unknown;
                if (valueLower == "untouched") return PackageFileType::Untouched;
                if (valueLower == "binary") return PackageFileType::Binary;
            }
            
            return PackageFileType::Unknown;
        }

        /// <summary>
        /// Converts to lower. Copy from StringHelpers to ensure Enum does not require
        /// any outside dependency. Although we could include a header, doing so restricts
        /// the project which holds StringHelpers.
        /// </summary>
        static std::string ToLower(const std::string & input)
        {
            std::string output = input;
            for (char& c : output)
            {
                if (c >= 'A' && c <= 'Z')
                {
                    c = c - 'A' + 'a';
                }
            }
            return output;
        }
    };
}
